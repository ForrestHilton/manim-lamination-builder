from typing import List
from manim_lamination_builder.custom_json import custom_parse
from manim_lamination_builder.lamination import GapLamination


lams = custom_parse("""
[{"points": [], "degree": 2, "polygons": [["011_010", "011_100", "100_001"], ["1011_010", "1011_100", "1100_001"], ["101_010", "101_100", "110_001"], ["1001_010", "1001_100", "1010_001"], ["0000_001", "1111_010", "1111_100"], ["000_001", "111_010", "111_100"], ["0111_010", "0111_100", "1000_001"], ["1101_010", "1101_100", "1110_001"], ["0101_010", "0101_100", "0110_001"], ["001_010", "001_100", "010_001"], ["0011_010", "0011_100", "0100_001"], ["01_010", "01_100", "10_001"], ["0001_010", "0001_100", "0010_001"], ["00_001", "11_010", "11_100"], ["_001", "_010", "_100"], ["0_001", "1_010", "1_100"]]},
{"points": [], "degree": 2, "polygons": [["011_010", "011_100", "100_001"], ["1011_010", "1011_100", "1100_001"], ["101_010", "101_100", "110_001"], 
["0001_010", "0001_100", "0010_001", "1001_010", "1001_100", "1010_001"],
["0000_001", "1111_010", "1111_100"], ["000_001", "111_010", "111_100"], ["0111_010", "0111_100", "1000_001"], ["1101_010", "1101_100", "1110_001"], ["0101_010", "0101_100", "0110_001"], ["001_010", "001_100", "010_001"], ["0011_010", "0011_100", "0100_001"], ["01_010", "01_100", "10_001"], ["00_001", "11_010", "11_100"], ["_001", "_010", "_100"], ["0_001", "1_010", "1_100"]]},
{"points": [], "degree": 2, "polygons": [["011_010", "011_100", "100_001"], ["1011_010", "1011_100", "1100_001"], ["101_010", "101_100", "110_001"], ["0010_001", "1001_010", "1001_100"], ["0000_001", "1111_010", "1111_100"], ["000_001", "111_010", "111_100"], ["0111_010", "0111_100", "1000_001"], ["1101_010", "1101_100", "1110_001"], ["0101_010", "0101_100", "0110_001"], ["001_010", "001_100", "010_001"], ["0011_010", "0011_100", "0100_001"], ["01_010", "01_100", "10_001"], ["0001_010", "0001_100", "1010_001"], ["00_001", "11_010", "11_100"], ["_001", "_010", "_100"], ["0_001", "1_010", "1_100"]]},
{"points": [], "degree": 2, "polygons": [["011_010", "011_100", "100_001"], ["1011_010", "1011_100", "1100_001"], ["0001_100", "0010_001", "1001_010"], ["101_010", "101_100", "110_001"], ["0000_001", "1111_010", "1111_100"], ["000_001", "111_010", "111_100"], ["0111_010", "0111_100", "1000_001"], ["1101_010", "1101_100", "1110_001"], ["0101_010", "0101_100", "0110_001"], ["001_010", "001_100", "010_001"], ["0011_010", "0011_100", "0100_001"], ["0001_010", "1001_100", "1010_001"], ["01_010", "01_100", "10_001"], ["00_001", "11_010", "11_100"], ["_001", "_010", "_100"], ["0_001", "1_010", "1_100"]]}]

""")
# assert isinstance(lams, List[GapLamination])


def test_trapped_criticality():
    assert lams[0].trapped_criticality() == 0
    assert lams[1].trapped_criticality() == 1
    assert lams[2].trapped_criticality() == 0
    assert lams[3].trapped_criticality() == 0


def test_finer():
    assert lams[0].finer(lams[0])
    assert lams[1].finer(lams[1])
    assert lams[2].finer(lams[2])
    assert lams[3].finer(lams[3])
    assert not lams[0].finer(lams[2])
    assert not lams[0].finer(lams[3])
    assert not lams[2].finer(lams[3])
    assert lams[0].finer(lams[1])
    assert lams[2].finer(lams[1])
    assert lams[3].finer(lams[1])
